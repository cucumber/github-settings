import * as pulumi from "@pulumi/pulumi";
import * as github from "@pulumi/github";

export const cucumber_cucumber_ruby = new github.Repository("cucumber/cucumber-ruby", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Cucumber for Ruby",
    hasDownloads: true,
    hasIssues: true,
    homepageUrl: "https://cucumber.io",
    name: "cucumber-ruby",
    topics: ["hacktoberfest"],
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_rails = new github.Repository("cucumber/cucumber-rails", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Rails Generators for Cucumber with special support for Capybara and DatabaseCleaner",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    homepageUrl: "https://github.com/cucumber/cucumber-rails",
    name: "cucumber-rails",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_aruba = new github.Repository("cucumber/aruba", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: false,
    allowSquashMerge: false,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Test command-line applications with Cucumber-Ruby, RSpec or Minitest.",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    name: "aruba",
    topics: [
        undefined,
        undefined,
        "tdd",
    ],
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_tmbundle = new github.Repository("cucumber/cucumber-tmbundle", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: true,
    deleteBranchOnMerge: false,
    description: "TextMate bundle for Cucumber",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    homepageUrl: "http://www.benmabey.com",
    name: "cucumber-tmbundle",
}, {
    protect: true,
});
export const cucumber_cucumber_cpp = new github.Repository("cucumber/cucumber-cpp", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Support for writing Cucumber step definitions in C++",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-cpp",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_js = new github.Repository("cucumber/cucumber-js", {
    allowAutoMerge: false,
    allowMergeCommit: false,
    allowRebaseMerge: false,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Cucumber for JavaScript",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    homepageUrl: "https://cucumber.io",
    name: "cucumber-js",
    pages: {
        source: {
            branch: "gh-pages",
        },
    },
    topics: [
        undefined,
        "javascript",
        "cucumber",
    ],
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_jvm = new github.Repository("cucumber/cucumber-jvm", {
    allowAutoMerge: false,
    allowMergeCommit: false,
    allowRebaseMerge: false,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Cucumber for the JVM",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    homepageUrl: "https://cucumber.io",
    name: "cucumber-jvm",
    topics: [
        undefined,
        undefined,
        "cucumber-jvm",
    ],
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_lua = new github.Repository("cucumber/cucumber-lua", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "A cucumber wire protocol implementation for Lua step definitions",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-lua",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_eclipse = new github.Repository("cucumber/cucumber-eclipse", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Eclipse plugin for Cucumber",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-eclipse",
    pages: {
        source: {
            branch: "gh-pages",
        },
    },
    topics: ["hacktoberfest"],
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_multi_test = new github.Repository("cucumber/multi_test", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Abstraction over the various ways to clobber test frameworks autorun capabilities",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "multi_test",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_ruby_core = new github.Repository("cucumber/cucumber-ruby-core", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Core library for the Ruby flavour of Cucumber",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    name: "cucumber-ruby-core",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_java_skeleton = new github.Repository("cucumber/cucumber-java-skeleton", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "This is the simplest possible setup for Cucumber-JVM using Java.",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-java-skeleton",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_website = new github.Repository("cucumber/website", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: true,
    deleteBranchOnMerge: false,
    description: "Cucumber website blog, plus a few other static pages",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    homepageUrl: "https://cucumber.io",
    name: "website",
}, {
    protect: true,
});
export const cucumber_cucumber_ruby_tcl = new github.Repository("cucumber/cucumber-ruby-tcl", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: true,
    deleteBranchOnMerge: false,
    description: "Tcl bindings for Cucumber",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-ruby-tcl",
}, {
    protect: true,
});
export const cucumber_gherkin_ruby = new github.Repository("cucumber/gherkin-ruby", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: " [READ-ONLY] Gherkin for Ruby - subtree of monorepo https://github.com/cucumber/cucumber ",
    hasDownloads: true,
    name: "gherkin-ruby",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_gherkin_java = new github.Repository("cucumber/gherkin-java", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: " [READ-ONLY] Gherkin for Java - subtree of monorepo https://github.com/cucumber/cucumber ",
    hasDownloads: true,
    name: "gherkin-java",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_gherkin_javascript = new github.Repository("cucumber/gherkin-javascript", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: " [READ-ONLY] Gherkin for JavaScript - subtree of monorepo https://github.com/cucumber/cucumber ",
    hasDownloads: true,
    name: "gherkin-javascript",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_gherkin_go = new github.Repository("cucumber/gherkin-go", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: " [READ-ONLY] Gherkin for Go - subtree of monorepo https://github.com/cucumber/cucumber ",
    hasDownloads: true,
    name: "gherkin-go",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_gherkin_dotnet = new github.Repository("cucumber/gherkin-dotnet", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: " [READ-ONLY] Gherkin for Dotnet - subtree of monorepo https://github.com/cucumber/cucumber Gherkin parser/compiler for .NET",
    hasDownloads: true,
    name: "gherkin-dotnet",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_godog = new github.Repository("cucumber/godog", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Cucumber for golang",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "godog",
    pages: {
        source: {
            branch: "gh-pages",
        },
    },
    topics: [
        undefined,
        "gherkin",
        "integration-testing",
        "golang",
    ],
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_common = new github.Repository("cucumber/common", {
    allowAutoMerge: true,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "A monorepo of common components - building blocks for implementing Cucumber in various languages.",
    hasDownloads: true,
    hasIssues: true,
    homepageUrl: "https://cucumber.io/docs",
    name: "common",
    topics: [
        undefined,
        "bdd-framework",
    ],
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_ruby_wire = new github.Repository("cucumber/cucumber-ruby-wire", {
    allowAutoMerge: false,
    allowMergeCommit: false,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Wire protocol plugin for Cucumber",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    name: "cucumber-ruby-wire",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_gherkin_python = new github.Repository("cucumber/gherkin-python", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: " [READ-ONLY] Gherkin for Python - subtree of monorepo https://github.com/cucumber/cucumber ",
    hasDownloads: true,
    name: "gherkin-python",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_gherkin_objective_c = new github.Repository("cucumber/gherkin-objective-c", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: " [READ-ONLY] Gherkin for Objective C - subtree of monorepo https://github.com/cucumber/cucumber ",
    hasDownloads: true,
    name: "gherkin-objective-c",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_tcl_wire = new github.Repository("cucumber/cucumber-tcl-wire", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "proposal for cucumber-tcl over the wire",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-tcl-wire",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_gherkin_perl = new github.Repository("cucumber/gherkin-perl", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: " [READ-ONLY] Gherkin for Perl - subtree of monorepo https://github.com/cucumber/cucumber ",
    hasDownloads: true,
    name: "gherkin-perl",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_tag_expressions_java = new github.Repository("cucumber/tag-expressions-java", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ-ONLY] Tag Expression Parser for Java - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    name: "tag-expressions-java",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_tag_expressions_javascript = new github.Repository("cucumber/tag-expressions-javascript", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ-ONLY] Tag Expression Parser for JavaScript - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    name: "tag-expressions-javascript",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_expressions_java = new github.Repository("cucumber/cucumber-expressions-java", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Cucumber Expressions for Java - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    name: "cucumber-expressions-java",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_expressions_javascript = new github.Repository("cucumber/cucumber-expressions-javascript", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Cucumber Expressions for JavaScript - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    name: "cucumber-expressions-javascript",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_expressions_ruby = new github.Repository("cucumber/cucumber-expressions-ruby", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Cucumber Expressions for Ruby - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    name: "cucumber-expressions-ruby",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_tag_expressions_ruby = new github.Repository("cucumber/tag-expressions-ruby", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ-ONLY] Tag Expression Parser for Ruby - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    name: "tag-expressions-ruby",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_react = new github.Repository("cucumber/cucumber-react", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ-ONLY] Cucumber React - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    name: "cucumber-react",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_electron = new github.Repository("cucumber/cucumber-electron", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Run cucumber.js in electron",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-electron",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_git_subrepo = new github.Repository("cucumber/git-subrepo", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    hasDownloads: true,
    hasProjects: true,
    hasWiki: true,
    name: "git-subrepo",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_gherkin_c = new github.Repository("cucumber/gherkin-c", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: " [READ-ONLY] Gherkin for C - subtree of monorepo https://github.com/cucumber/cucumber ",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "gherkin-c",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_docs = new github.Repository("cucumber/docs", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Cucumber user documentation",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    homepageUrl: "https://cucumber.io/docs/installation/",
    name: "docs",
    topics: [
        "gherkin",
        "bdd",
        undefined,
        "docs",
    ],
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_aruba_getting_started = new github.Repository("cucumber/aruba-getting-started", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Getting started with aruba",
    hasDownloads: true,
    hasIssues: true,
    homepageUrl: "https://github.com/cucumber/aruba",
    name: "aruba-getting-started",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_commitbit = new github.Repository("cucumber/commitbit", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Microservice that hands out commit bit to everyone who gets a pull request merged",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "commitbit",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_github_issue_stats = new github.Repository("cucumber/github-issue-stats", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: true,
    deleteBranchOnMerge: false,
    description: "Compute and visualise stats about GitHub issues",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "github-issue-stats",
}, {
    protect: true,
});
export const cucumber_cucumber_json_testdata_generator = new github.Repository("cucumber/cucumber-json-testdata-generator", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Generate Cucumber JSON testdata with several Cucumber implementations",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-json-testdata-generator",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_api_cucumber_io = new github.Repository("cucumber/api.cucumber.io", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: true,
    deleteBranchOnMerge: false,
    description: "Generated API documentation for Cucumber",
    hasDownloads: true,
    hasIssues: true,
    name: "api.cucumber.io",
}, {
    protect: true,
});
export const cucumber_cucumber_jvm_groovy = new github.Repository("cucumber/cucumber-jvm-groovy", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Cucumber Groovy",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-jvm-groovy",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_jvm_scala = new github.Repository("cucumber/cucumber-jvm-scala", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Cucumber Scala",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-jvm-scala",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_ml = new github.Repository("cucumber/cucumber.ml", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Cucumber for OCaml",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber.ml",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_archetype = new github.Repository("cucumber/cucumber-archetype", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: true,
    deleteBranchOnMerge: false,
    description: "Maven Archetype for Cucumber. Moved to cucumber-jvm",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-archetype",
    topics: [
        "maven-archetype",
        "cucumber-jvm",
    ],
}, {
    protect: true,
});
export const cucumber_tag_expressions_go = new github.Repository("cucumber/tag-expressions-go", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ-ONLY] Tag Expression Parser for Go - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "tag-expressions-go",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_config_java = new github.Repository("cucumber/config-java", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ-ONLY] Cucumber Config for Java - subtree of monorepo ",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "config-java",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_expressions_go = new github.Repository("cucumber/cucumber-expressions-go", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Cucumber Expressions for Go - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    name: "cucumber-expressions-go",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_datatable_java = new github.Repository("cucumber/datatable-java", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: true,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Data Table for Java - subtree of monorepo. Now part of Cucumber-JVM",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "datatable-java",
}, {
    protect: true,
});
export const cucumber_tag_expressions_python = new github.Repository("cucumber/tag-expressions-python", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ-ONLY] Tag Expression Parser for Python - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    name: "tag-expressions-python",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_slack_invite_automation = new github.Repository("cucumber/slack-invite-automation", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "A tiny web application to invite a user into your slack team.",
    hasDownloads: true,
    hasProjects: true,
    hasWiki: true,
    name: "slack-invite-automation",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_messages_java = new github.Repository("cucumber/messages-java", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Cucumber Messages for Java (Protocol Buffers) - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    hasProjects: true,
    name: "messages-java",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_messages_javascript = new github.Repository("cucumber/messages-javascript", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Cucumber Messages for JavaScript (Protocol Buffers) - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    hasProjects: true,
    name: "messages-javascript",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_messages_go = new github.Repository("cucumber/messages-go", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Cucumber Messages for Go (Protocol Buffers) - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    hasProjects: true,
    name: "messages-go",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_messages_dotnet = new github.Repository("cucumber/messages-dotnet", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Cucumber Messages for .NET (Protocol Buffers) - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    hasProjects: true,
    name: "messages-dotnet",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_messages_ruby = new github.Repository("cucumber/messages-ruby", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Cucumber Messages for Ruby (Protocol Buffers) - subtree of monorepo https://github.com/cucumber/cucumber",
    hasDownloads: true,
    hasProjects: true,
    name: "messages-ruby",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_android = new github.Repository("cucumber/cucumber-android", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Android support for Cucumber-JVM",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-android",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_dots_formatter_go = new github.Repository("cucumber/dots-formatter-go", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Simple formatter that prints a dot for each passed step.",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "dots-formatter-go",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_dots_formatter_ruby = new github.Repository("cucumber/dots-formatter-ruby", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Dots Formatter for Ruby - subtree of monorepo https://github.com/cucumber/cucumber/tree/master/dots-formatter/ruby",
    hasDownloads: true,
    name: "dots-formatter-ruby",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_c21e_ruby = new github.Repository("cucumber/c21e-ruby", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ-ONLY] CrossPlatformExecutable library for Ruby",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "c21e-ruby",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_c21e_java = new github.Repository("cucumber/c21e-java", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ-ONLY] CrossPlatformExecutable library for Java ",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "c21e-java",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_c21e_javascript = new github.Repository("cucumber/c21e-javascript", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ-ONLY] CrossPlatformExecutable library for JavaScript",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "c21e-javascript",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_pretty_formatter_go = new github.Repository("cucumber/pretty-formatter-go", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ-ONLY] Mirror of https://github.com/cucumber/cucumber/tree/master/pretty-formatter/go",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "pretty-formatter-go",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_parent = new github.Repository("cucumber/cucumber-parent", {
    allowAutoMerge: false,
    allowMergeCommit: false,
    allowRebaseMerge: false,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Parent `pom.xml` for all Cucumber Java modules",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    name: "cucumber-parent",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_eclipse_update_site = new github.Repository("cucumber/cucumber-eclipse-update-site", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Cucumber Eclipse Update Site",
    hasDownloads: true,
    hasIssues: true,
    name: "cucumber-eclipse-update-site",
    pages: {
        source: {
            branch: "gh-pages",
        },
    },
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_eclipse_update_site_snapshot = new github.Repository("cucumber/cucumber-eclipse-update-site-snapshot", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Cucumber Eclipse Update Site Snapshots",
    hasDownloads: true,
    hasIssues: true,
    name: "cucumber-eclipse-update-site-snapshot",
    pages: {
        source: {
            branch: "gh-pages",
        },
    },
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_io_file_generator = new github.Repository("cucumber/cucumber.io-file-generator", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Home of the generation and upload of website sitemaps, rss feed, and robots.txt",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber.io-file-generator",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_ruby_meta = new github.Repository("cucumber/cucumber-ruby-meta", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Meta project to handle all cucumber-ruby related repositories",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-ruby-meta",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_repo_template = new github.Repository("cucumber/repo-template", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Contains templates that should be used in all other Cucumber repositories",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "repo-template",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_html_formatter = new github.Repository("cucumber/html-formatter", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READONLY] Mirror of https://github.com/cucumber/cucumber/tree/master/html-formatter/javascript",
    hasDownloads: true,
    name: "html-formatter",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_fake_cucumber_javascript = new github.Repository("cucumber/fake-cucumber-javascript", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] Fake Cucumber produces fake results for Gherkin documents",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "fake-cucumber-javascript",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_protobuf = new github.Repository("cucumber/protobuf", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "A pure ruby implementation of Google's Protocol Buffers",
    hasDownloads: true,
    hasProjects: true,
    hasWiki: true,
    homepageUrl: "https://github.com/ruby-protobuf",
    name: "protobuf",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_protobuf_js = new github.Repository("cucumber/protobuf.js", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Protocol Buffers for JavaScript (& TypeScript).",
    hasDownloads: true,
    hasProjects: true,
    hasWiki: true,
    name: "protobuf.js",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_html_formatter_java = new github.Repository("cucumber/html-formatter-java", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READONLY] Mirror of https://github.com/cucumber/cucumber/tree/master/html-formatter/java",
    hasDownloads: true,
    name: "html-formatter-java",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_todo_react_typescript_subsecond = new github.Repository("cucumber/todo-react-typescript-subsecond", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Tiny Todo app in React and TypeScript demonstrating sub-second test feedback",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "todo-react-typescript-subsecond",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_microdata = new github.Repository("cucumber/microdata", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Extract WHATWG microdata from a DOM",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "microdata",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_compatibility_kit_javascript = new github.Repository("cucumber/compatibility-kit-javascript", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "[READ ONLY] mirror of https://github.com/cucumber/cucumber/tree/master/compatibility-kit/javascript",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "compatibility-kit-javascript",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_message_upload_service = new github.Repository("cucumber/cucumber-message-upload-service", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "SAR app that creates a Lambda function and S3 bucket to allow web applications to upload JPG files without a webserver.",
    hasDownloads: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-message-upload-service",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_classroom = new github.Repository("cucumber/cucumber-classroom", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "GitHub Classroom lessons for Cucumber",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    isTemplate: true,
    name: "cucumber-classroom",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_build = new github.Repository("cucumber/build", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Docker image used to build the Cucumber Project",
    hasDownloads: true,
    hasIssues: true,
    name: "build",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_js_package_upgrade = new github.Repository("cucumber/cucumber-js-package-upgrade", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "package to point users to the new @cucumber/cucumber",
    hasDownloads: true,
    name: "cucumber-js-package-upgrade",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_coffee_machine = new github.Repository("cucumber/coffee-machine", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Repository set for testing purpose",
    hasDownloads: true,
    hasProjects: true,
    hasWiki: true,
    name: "coffee-machine",
}, {
    protect: true,
});
export const cucumber_private = new github.Repository("cucumber/private", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Just a private repo for testing",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "private",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_coffee_machine_javascript = new github.Repository("cucumber/coffee-machine-javascript", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Example repository that works nicely with CucumberStudio BDD project",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "coffee-machine-javascript",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_pretty_formatter = new github.Repository("cucumber/cucumber-pretty-formatter", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Cucumber.js pretty formatter",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-pretty-formatter",
}, {
    protect: true,
});
export const cucumber_label_demo = new github.Repository("cucumber/label-demo", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Temporary repo to gather feedback on",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "label-demo",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_screenplay_js = new github.Repository("cucumber/screenplay.js", {
    allowAutoMerge: true,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Library to ease implementation of the Screenplay pattern with CucumberJS",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "screenplay.js",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_json_schema = new github.Repository("cucumber/cucumber-json-schema", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "JSON Schemas for Cucumber JSON output ",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "cucumber-json-schema",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_oselvar_github_metrics = new github.Repository("cucumber/oselvar-github-metrics", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Oselvar GitHub Metrics for the Cucumber Organisation",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "oselvar-github-metrics",
    template: {
        owner: "oselvar",
        repository: "oselvar-github-metrics",
    },
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_har_net_http = new github.Repository("cucumber/har-net-http", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Capture HAR files from net/http requests",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "har-net-http",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber__github = new github.Repository("cucumber/.github", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "👩‍⚕️ Default community health files for the Cucumber organisation on GitHub. ",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    name: ".github",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_changelog = new github.Repository("cucumber/changelog", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Read, validate and manipulate CHANGELOG.md files that follow keepachangelog.com specification",
    hasDownloads: true,
    hasIssues: true,
    name: "changelog",
}, {
    protect: true,
});
export const cucumber_action_changelog = new github.Repository("cucumber/action-changelog", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "GitHub Action for changelog tool",
    hasDownloads: true,
    hasProjects: true,
    hasWiki: true,
    name: "action-changelog",
}, {
    protect: true,
});
export const cucumber_action_create_release_pr = new github.Repository("cucumber/action-create-release-pr", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "action-create-release-pr",
}, {
    protect: true,
});
export const cucumber_action_publish_rubygem = new github.Repository("cucumber/action-publish-rubygem", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "GitHub Action to publish a Ruby Gem",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "action-publish-rubygem",
}, {
    protect: true,
});
export const cucumber_action_get_versions = new github.Repository("cucumber/action-get-versions", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "action-get-versions",
}, {
    protect: true,
});
export const cucumber_action_create_github_release = new github.Repository("cucumber/action-create-github-release", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "action-create-github-release",
}, {
    protect: true,
});
export const cucumber_blockly = new github.Repository("cucumber/blockly", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Gherkin Editor based on Blockly",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "blockly",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_cucumber_expressions = new github.Repository("cucumber/cucumber-expressions", {
    allowAutoMerge: true,
    allowMergeCommit: true,
    allowRebaseMerge: false,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Human friendly alternative to Regular Expressions",
    hasDownloads: true,
    hasIssues: true,
    name: "cucumber-expressions",
    pages: {
        source: {
            branch: "main",
        },
    },
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_release_tests = new github.Repository("cucumber/release-tests", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Tests for some release automation through github actions",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "release-tests",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_action_publish_npm = new github.Repository("cucumber/action-publish-npm", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "GitHub Action to publish an NPM module",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "action-publish-npm",
}, {
    protect: true,
});
export const cucumber_action_publish_mvn = new github.Repository("cucumber/action-publish-mvn", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "GitHub Action to publish Maven artefacts ",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "action-publish-mvn",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_tag_expressions = new github.Repository("cucumber/tag-expressions", {
    allowAutoMerge: true,
    allowMergeCommit: false,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Cucumber tag expression parser",
    hasDownloads: true,
    hasIssues: true,
    name: "tag-expressions",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_suggest = new github.Repository("cucumber/suggest", {
    allowAutoMerge: true,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: true,
    deleteBranchOnMerge: true,
    description: "Library for suggesting steps",
    hasDownloads: true,
    hasIssues: true,
    name: "suggest",
}, {
    protect: true,
});
export const cucumber_language_service = new github.Repository("cucumber/language-service", {
    allowAutoMerge: true,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Cucumber Language Service",
    hasDownloads: true,
    hasIssues: true,
    name: "language-service",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_language_server = new github.Repository("cucumber/language-server", {
    allowAutoMerge: true,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Cucumber Language Server",
    hasDownloads: true,
    hasIssues: true,
    name: "language-server",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_monaco = new github.Repository("cucumber/monaco", {
    allowAutoMerge: true,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    description: "Configure Monaco editor to use cucumber-language-service ",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    name: "monaco",
    pages: {
        source: {
            branch: "main",
        },
    },
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_vscode = new github.Repository("cucumber/vscode", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Official Visual Studio Code Extension for Cucumber",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "vscode",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_awesome_cucumber = new github.Repository("cucumber/awesome-cucumber", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    name: "awesome-cucumber",
}, {
    protect: true,
});
export const cucumber_create_meta = new github.Repository("cucumber/create-meta", {
    allowAutoMerge: true,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: true,
    hasDownloads: true,
    hasIssues: true,
    name: "create-meta",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
export const cucumber_github_settings = new github.Repository("cucumber/github-settings", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "Pulumi scripts to automatically configure our GitHub org/repo settings",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "github-settings",
}, {
    protect: true,
});
export const cucumber_action_publish_cpan = new github.Repository("cucumber/action-publish-cpan", {
    allowAutoMerge: false,
    allowMergeCommit: true,
    allowRebaseMerge: true,
    allowSquashMerge: true,
    archived: false,
    deleteBranchOnMerge: false,
    description: "GitHub Action to publish a Perl module to CPAN ",
    hasDownloads: true,
    hasIssues: true,
    hasProjects: true,
    hasWiki: true,
    name: "action-publish-cpan",
    vulnerabilityAlerts: true,
}, {
    protect: true,
});
